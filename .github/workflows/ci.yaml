
name: CI Pipeline

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  generate-target-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        uses: actions/checkout@v4

      - id: generate-matrix
        env:
          TARGETS: ${{ vars.TARGETS }}
        run: |
          IFS=', []"' read -r -a TARGETS <<< "$TARGETS"
          FILTERED_JSON=$(jq -c '[.[] | select(.id as $id | ($id | in($TARGETS)))]' target-matrix.json)
          echo "matrix=$FILTERED_JSON" >> $GITHUB_OUTPUT

  test-and-build:
    needs: generate-target-matrix
    runs-on: ${{ matrix.platform.runs_on }}
    name: ${{ matrix.platform.os-name }} - ${{ matrix.platform.id }} - ${{ matrix.environment }}
    strategy:
      matrix:
        environment: [debug, release]
        platform: ${{fromJson(needs.generate-target-matrix.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build ${{ matrix.environment }} binary
        uses: houseabsolute/actions-rust-cross@v1.0.3
        with:
          working-directory: rust
          # FIXME: https://github.com/cross-rs/cross/issues/1222
          # cross-version: c7dee4d008475ce1c140773cbcd6078f4b86c2aa
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: ${{ matrix.environment == 'release' && '--locked --release' || '--locked' }} ${{ matrix.platform.args }}
          toolchain: ${{ matrix.platform.toolchain }}
          strip: true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-${{ matrix.environment }}-${{ matrix.platform.os-name }}-${{ matrix.platform.id }}
          path: rust/target/${{ matrix.platform.target }}/${{ matrix.environment }}/${{ matrix.platform.output }}
          retention-days: 1


  # export:
  #   name: Export Game Builds
  #   needs: test-and-build
  #   permissions: write-all
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install wine
  #       id: wine_install
  #       run: |
  #         sudo apt install wine64
  #         echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT

  #     - name: Download Release Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: rust/target/release
  #         pattern: rust-release-*
  #         merge-multiple: true

  #     - name: Download Debug Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: rust/target/debug
  #         pattern: rust-debug-*
  #         merge-multiple: true

  #     - name: Rename Executables
  #       env:
  #         GAME_NAME: ${{ vars.ITCHIO_GAMENAME }}
  #       # When adding or removing export presets, change this line below accordingly
  #       run: sed -i '/^export_path/s/mac.zip/'"$GAME_NAME"'.zip/; /^export_path/s/linux.x86_64/'"$GAME_NAME"'.x86_64/; /^export_path/s/windows.exe/'"$GAME_NAME"'.exe/' $GITHUB_WORKSPACE/godot/export_presets.cfg

  #     - name: Export Games
  #       id: export
  #       uses: firebelley/godot-export@v6.0.0
  #       with:
  #         godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ vars.GODOT_VERSION }}-stable/Godot_v${{ vars.GODOT_VERSION }}-stable_linux.x86_64.zip
  #         godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ vars.GODOT_VERSION }}-stable/Godot_v${{ vars.GODOT_VERSION }}-stable_export_templates.tpz
  #         relative_project_path: godot
  #         relative_export_path: build
  #         cache: true
  #         verbose: true
  #         wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}

  #     - name: Upload Development Build
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: games
  #         path: build/
  #         retention-days: 1
